name: tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-fpm:
    name: Build FPM
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt-get update && sudo apt-get install -y gfortran curl
      - run: curl -L https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0.F90 -o fpm.F90
      - run: gfortran -O0 -static fpm.F90 -o fpm
      - name: Upload built fpm
        uses: actions/upload-artifact@v4
        with:
          name: fpm
          path: fpm
          retention-days: 2

  gfortran:
    runs-on: ubuntu-24.04
    needs: build-fpm
    strategy:
      fail-fast: false
      matrix:
        gcc-ver: [14]
    name: gfortran ${{ matrix.gcc-ver }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install gfortran ${{ matrix.gcc-ver }}
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install -y gfortran-${{ matrix.gcc-ver }}

      - name: Install build dependencies
        run: sudo apt-get install -y libcfitsio-dev libpng-dev libgnutls30 libreadline-dev

      - name: Download fpm
        uses: actions/download-artifact@v4
        with:
          name: fpm
      - run: chmod +x fpm
  
      - name: Download test data
        run: scripts/get_test_data.sh

      - name: Build and install the app
        run: |
          FFLAGS="-O0 -g -fbacktrace -fno-omit-frame-pointer -fcheck=all -ffree-line-length-none -fimplicit-none"
          ./fpm clean -all
          ./fpm build \
            --compiler gfortran-${{ matrix.gcc-ver }} \
            --c-compiler gcc-${{ matrix.gcc-ver }} \
            --flag "$FFLAGS"
          sudo ./fpm install --no-rebuild --prefix /usr \
            --compiler gfortran-${{ matrix.gcc-ver }} \
            --c-compiler gcc-${{ matrix.gcc-ver }} \
            --flag "$FFLAGS"

      - name: Run integration test on example data (debug)
        run: |
          mkdir testrun
          cd testrun
          ln -s ../examples
          ln -s ../testdata
          ../scripts/test_routine.sh

      - name: Build and install the app (release, OpenMP)
        run: |
          FFLAGS="-O3 -g -fbacktrace -ffast-math -fopenmp"
          ./fpm clean -all
          ./fpm build \
            --compiler gfortran-${{ matrix.gcc-ver }} \
            --c-compiler gcc-${{ matrix.gcc-ver }} \
            --flag "$FFLAGS"
          sudo ./fpm install --no-rebuild --prefix /usr \
            --compiler gfortran-${{ matrix.gcc-ver }} \
            --c-compiler gcc-${{ matrix.gcc-ver }} \
            --flag "$FFLAGS"

      - name: Run integration test on example data (release, OpenMP)
        run: |
          mkdir testrun2
          cd testrun2
          ln -s ../examples
          ln -s ../testdata
          ../scripts/test_routine.sh

  oneapi:
    runs-on: ubuntu-24.04
    needs: build-fpm
    strategy:
      fail-fast: false
      matrix:
        oneapi-ver: ["2025.2", "2025.1", "2025.0"]
    name: oneapi ${{ matrix.oneapi-ver }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install oneapi
        run: |
          sudo apt-get update
          sudo apt-get install -y gpg gpg-agent wget git curl
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \
            | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] " \
            " https://apt.repos.intel.com/oneapi all main" \
            | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
            intel-oneapi-compiler-fortran-${{ matrix.oneapi-ver }} \
            intel-oneapi-compiler-dpcpp-cpp-${{ matrix.oneapi-ver }} 

      - name: Install build dependencies
        run: sudo apt-get install -y libcfitsio-dev libpng-dev libgnutls30 libreadline-dev

      - name: Download fpm
        uses: actions/download-artifact@v4
        with:
          name: fpm
      - run: chmod +x fpm

      - name: Download test data
        run: scripts/get_test_data.sh

      - name: Build and install the app
        run: |
          FFLAGS="-O0 -g -traceback -check all -fstack-security-check -fstack-protector-all -fno-omit-frame-pointer -pedantic"
          source /opt/intel/oneapi/setvars.sh
          ./fpm clean -all
          ./fpm build \
            --compiler ifx --flag "$FFLAGS"
          sudo ./fpm install --no-rebuild --prefix /usr \
            --compiler ifx --flag "$FFLAGS"
  
      - name: Run integration test on example data
        run: |
          source /opt/intel/oneapi/setvars.sh
          mkdir testrun
          cd testrun
          ln -s ../examples
          ln -s ../testdata
          ../scripts/test_routine.sh

      - name: Build and install the app (release, OpenMP)
        run: |
          FFLAGS="-O3 -g -traceback -fp-model=fast -qopenmp"
          source /opt/intel/oneapi/setvars.sh
          ./fpm clean -all
          ./fpm build \
            --compiler ifx --flag "$FFLAGS"
          sudo ./fpm install --no-rebuild --prefix /usr \
            --compiler ifx --flag "$FFLAGS"
  
      - name: Run integration test on example data (release, OpenMP)
        run: |
          source /opt/intel/oneapi/setvars.sh
          mkdir testrun2
          cd testrun2
          ln -s ../examples
          ln -s ../testdata
          ../scripts/test_routine.sh

  flang:
    runs-on: ubuntu-24.04
    needs: build-fpm
    strategy:
      fail-fast: false
      matrix:
        llvm-ver: [20]

    name: flang ${{ matrix.llvm-ver }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install flang ${{ matrix.llvm-ver }}
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gnupg \
            lsb-release \
            ca-certificates \
            curl \
            gnupg2 \
            apt-transport-https
          curl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/llvm.asc >/dev/null
          echo "deb [signed-by=/etc/apt/trusted.gpg.d/llvm.asc] http://apt.llvm.org/noble/ llvm-toolchain-noble-${{ matrix.llvm-ver }} main" \
            | sudo tee /etc/apt/sources.list.d/llvm.list >/dev/null
          sudo apt-get update
          sudo apt-get install -y clang-${{ matrix.llvm-ver }} flang-${{ matrix.llvm-ver }} \
            libomp-${{ matrix.llvm-ver }}-dev

      - name: Install build dependencies
        run: sudo apt-get install -y libcfitsio-dev libpng-dev libgnutls30 libreadline-dev

      - name: Download fpm
        uses: actions/download-artifact@v4
        with:
          name: fpm
      - run: chmod +x fpm

      - name: Download test data
        run: scripts/get_test_data.sh

      - name: Build and install the app
        run: |
          FFLAGS="-g -O0 -fimplicit-none -pedantic"
          ./fpm build \
            --compiler flang-new-${{ matrix.llvm-ver }} \
            --c-compiler clang-${{ matrix.llvm-ver }} \
            --flag "$FFLAGS"
          sudo ./fpm install --no-rebuild --prefix /usr \
            --compiler flang-new-${{ matrix.llvm-ver }} \
            --c-compiler clang-${{ matrix.llvm-ver }} \
            --flag "$FFLAGS"
  
      - name: Run integration test on example data
        run: |
          mkdir testrun
          cd testrun
          ln -s ../examples
          ln -s ../testdata
          ../scripts/test_routine.sh

      - name: Build and install the app (release, OpenMP)
        run: |
          FFLAGS="-g -O3 -ffast-math -fopenmp"
          ./fpm build \
            --compiler flang-new-${{ matrix.llvm-ver }} \
            --c-compiler clang-${{ matrix.llvm-ver }} \
            --flag "$FFLAGS"
          sudo ./fpm install --no-rebuild --prefix /usr \
            --compiler flang-new-${{ matrix.llvm-ver }} \
            --c-compiler clang-${{ matrix.llvm-ver }} \
            --flag "$FFLAGS"
  
      - name: Run integration test on example data (release, OpenMP)
        run: |
          mkdir testrun2
          cd testrun2
          ln -s ../examples
          ln -s ../testdata
          ../scripts/test_routine.sh